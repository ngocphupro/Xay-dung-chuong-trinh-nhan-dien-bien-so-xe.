import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from PIL import Image, ImageTk, ImageDraw
import cv2
import easyocr
import os
import torch
from threading import Thread
import pytesseract
from datetime import datetime
import numpy as np
import re

pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

# Bi·∫øn to√†n c·ª•c
current_image_path = None
webcam_frame = None
running = True
last_detected = [None]

# H√†m kh·ªüi t·∫°o EasyOCR Reader
# - Ki·ªÉm tra xem c√≥ GPU kh√¥ng ƒë·ªÉ s·ª≠ d·ª•ng CUDA cho t·ªëc ƒë·ªô nhanh h∆°n.
# - N·∫øu c√≥ GPU, in th√¥ng tin GPU v√† kh·ªüi t·∫°o Reader v·ªõi GPU=True.
# - N·∫øu kh√¥ng, s·ª≠ d·ª•ng CPU.
def initialize_reader():
    if torch.cuda.is_available():
        gpu_name = torch.cuda.get_device_name(0)
        gpu_memory = torch.cuda.get_device_properties(0).total_memory // (1024 ** 2)
        print(f"GPU detected: {gpu_name} with {gpu_memory} MB memory. Using CUDA for processing.")
        return easyocr.Reader(["en", "vi"], gpu=True, model_storage_directory=None, download_enabled=True)
    else:
        print("No GPU detected: Defaulting to CPU.")
        return easyocr.Reader(["en", "vi"], gpu=False, model_storage_directory=None, download_enabled=True)

# Kh·ªüi t·∫°o EasyOCR Reader ngay t·ª´ ƒë·∫ßu
reader = initialize_reader()

# ======================================
# Quy tr√¨nh 1: Nh·∫≠n di·ªán bi·ªÉn s·ªë (License Plate Detection)
# ======================================

# H√†m ph√°t hi·ªán bi·ªÉn s·ªë xe t·ª´ ·∫£nh tƒ©nh (s·ª≠ d·ª•ng cho ·∫£nh t·∫£i l√™n ho·∫∑c ch·ª•p)
# Thu·∫≠t to√°n:
def detect_license_plate(image_path):
    # B∆∞·ªõc 1: ƒê·ªçc ·∫£nh
    image = cv2.imread(image_path)
    if image is None:
        return None, "Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh"

    # B∆∞·ªõc 2: Chuy·ªÉn sang grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # B∆∞·ªõc 3: √Åp d·ª•ng GaussianBlur ƒë·ªÉ gi·∫£m nhi·ªÖu
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)

    # B∆∞·ªõc 4: Ph√°t hi·ªán bi√™n v·ªõi Canny
    edged = cv2.Canny(blurred, 50, 200)

    # B∆∞·ªõc 5: T√¨m contours
    contours, _ = cv2.findContours(edged.copy(), cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    contours = sorted(contours, key=cv2.contourArea, reverse=True)[:10]

    plate_contour = None
    for contour in contours:
        # T√≠nh chu vi contour
        peri = cv2.arcLength(contour, True)
        # X·∫•p x·ªâ contour ƒë·ªÉ t√¨m h√¨nh 4 c·∫°nh
        approx = cv2.approxPolyDP(contour, 0.02 * peri, True)

        # N·∫øu contour c√≥ 4 ƒëi·ªÉm, c√≥ th·ªÉ l√† bi·ªÉn s·ªë
        if len(approx) == 4:
            plate_contour = approx
            break

    # N·∫øu t√¨m th·∫•y bi·ªÉn s·ªë
    if plate_contour is not None:
        # V·∫Ω contour l√™n ·∫£nh g·ªëc
        result_image = image.copy()
        cv2.drawContours(result_image, [plate_contour], -1, (0, 255, 0), 3)

        # T·∫°o mask ƒë·ªÉ c·∫Øt bi·ªÉn s·ªë (kh√¥ng s·ª≠ d·ª•ng mask ·ªü ƒë√¢y, m√† d√πng bounding rect)
        x, y, w, h = cv2.boundingRect(plate_contour)
        plate_image = image[y:y + h, x:x + w]

        return result_image, plate_image
    else:
        return None, None

# H√†m x·ª≠ l√Ω frame t·ª´ webcam ƒë·ªÉ ph√°t hi·ªán bi·ªÉn s·ªë (t√≠ch h·ª£p detect v√† OCR c∆° b·∫£n)
# Thu·∫≠t to√°n:
def process_frame(frame, last_detected):
    # B∆∞·ªõc 1: Chuy·ªÉn sang grayscale v√† tƒÉng c∆∞·ªùng t∆∞∆°ng ph·∫£n
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    gray = cv2.equalizeHist(gray)

    # B∆∞·ªõc 2: L·ªçc nhi·ªÖu
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)

    # B∆∞·ªõc 3: √Åp d·ª•ng Canny edge detection
    edges = cv2.Canny(blurred, 100, 200)

    # B∆∞·ªõc 4: T√¨m c√°c ƒë∆∞·ªùng vi·ªÅn
    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    for contour in contours:
        # B∆∞·ªõc 5: X·∫•p x·ªâ ƒë∆∞·ªùng vi·ªÅn ƒë·ªÉ t√¨m h√¨nh ch·ªØ nh·∫≠t
        peri = cv2.arcLength(contour, True)
        approx = cv2.approxPolyDP(contour, 0.02 * peri, True)

        # Ki·ªÉm tra n·∫øu ƒë∆∞·ªùng vi·ªÅn l√† h√¨nh ch·ªØ nh·∫≠t (4 ƒë·ªânh)
        if len(approx) == 4:
            x, y, w, h = cv2.boundingRect(approx)
            # Ki·ªÉm tra t·ª∑ l·ªá khung h√¨nh ph√π h·ª£p v·ªõi bi·ªÉn s·ªë
            aspect_ratio = w / float(h)
            if 2.0 <= aspect_ratio <= 4.0 and w >= 50 and h >= 20:
                # B∆∞·ªõc 6: C·∫Øt v√πng bi·ªÉn s·ªë v√† resize
                plate = gray[y:y + h, x:x + w]
                plate_resized = cv2.resize(plate, None, fx=2, fy=2, interpolation=cv2.INTER_CUBIC)

                # B∆∞·ªõc 7: OCR v·ªõi Pytesseract
                custom_config = r'--oem 3 --psm 7 -c tessedit_char_whitelist=ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-'
                text = pytesseract.image_to_string(plate_resized, config=custom_config).strip()

                # B∆∞·ªõc 8: Ki·ªÉm tra t√≠nh h·ª£p l·ªá v√† v·∫Ω/l∆∞u
                if len(text) < 4:
                    continue

                # V·∫Ω khung v√† vƒÉn b·∫£n tr√™n ·∫£nh g·ªëc
                cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
                cv2.putText(frame, text, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (36, 255, 12), 2)

                # L∆∞u ·∫£nh v·ªõi timestamp
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                os.makedirs("images", exist_ok=True)
                plate_filename = f"images/{timestamp}_plate_{text}.jpg"
                frame_filename = f"images/{timestamp}_frame_{text}.jpg"
                cv2.imwrite(plate_filename, plate_resized)
                cv2.imwrite(frame_filename, frame)

                print(f"Bi·ªÉn s·ªë: {text}")
                print(f"·∫¢nh bi·ªÉn l∆∞u t·∫°i {plate_filename}, ·∫£nh g·ªëc l∆∞u t·∫°i {frame_filename}")
                capture_image()

                last_detected[:] = frame

    return frame

# H√†m ph√°t hi·ªán bi·ªÉn s·ªë ri√™ng bi·ªát (g·ªçi t·ª´ n√∫t "Ph√°t hi·ªán bi·ªÉn s·ªë")
# - S·ª≠ d·ª•ng detect_license_plate ƒë·ªÉ detect v√† l∆∞u ·∫£nh annotated/plate.
# - C·∫≠p nh·∫≠t hi·ªÉn th·ªã v√† th√¥ng b√°o.
def detect_plate():
    if not current_image_path:
        messagebox.showwarning("C·∫£nh b√°o", "H√£y ch·ª•p ho·∫∑c t·∫£i l√™n m·ªôt ·∫£nh tr∆∞·ªõc!")
        return

    try:
        status_label.config(text="üîÑ ƒêang ph√°t hi·ªán bi·ªÉn s·ªë...", fg="#F39C12")
        root.update()

        annotated_image, plate_image = detect_license_plate(current_image_path)

        if annotated_image is not None:
            annotated_img = Image.fromarray(cv2.cvtColor(annotated_image, cv2.COLOR_BGR2RGB))
            annotated_img.thumbnail((400, 300))
            annotated_display = ImageTk.PhotoImage(annotated_img)
            image_label.config(image=annotated_display)
            image_label.image = annotated_display

            annotated_path = current_image_path.replace(".jpg", "_annotated.jpg")
            cv2.imwrite(annotated_path, annotated_image)

            if plate_image is not None:
                plate_path = current_image_path.replace(".jpg", "_plate.jpg")
                cv2.imwrite(plate_path, plate_image)

                status_label.config(text="‚úÖ ƒê√£ ph√°t hi·ªán v√† khoanh v√πng bi·ªÉn s·ªë!", fg="#27AE60")
                messagebox.showinfo("Th√†nh c√¥ng",
                                    f"ƒê√£ ph√°t hi·ªán bi·ªÉn s·ªë v√† l∆∞u ·∫£nh:\n- ·∫¢nh g·ªëc: {current_image_path}\n- ·∫¢nh khoanh v√πng: {annotated_path}\n- ·∫¢nh bi·ªÉn s·ªë: {plate_path}")
            else:
                status_label.config(text="‚ö†Ô∏è ƒê√£ khoanh v√πng nh∆∞ng kh√¥ng c·∫Øt ƒë∆∞·ª£c bi·ªÉn s·ªë", fg="#E67E22")
        else:
            status_label.config(text="‚ùå Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c bi·ªÉn s·ªë", fg="#E74C3C")
            messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng th·ªÉ ph√°t hi·ªán bi·ªÉn s·ªë trong ·∫£nh n√†y.")

    except Exception as e:
        messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ph√°t hi·ªán bi·ªÉn s·ªë: {e}")
        status_label.config(text="‚ùå L·ªói x·ª≠ l√Ω", fg="#E74C3C")

# ======================================
# Quy tr√¨nh 2: Nh·∫≠n di·ªán k√Ω t·ª± (Character Recognition - OCR)
# ======================================

# H√†m nh·∫≠n d·∫°ng vƒÉn b·∫£n t·ª´ ·∫£nh (s·ª≠ d·ª•ng EasyOCR)
# Thu·∫≠t to√°n:
def recognize_text():
    if not current_image_path:
        messagebox.showwarning("C·∫£nh b√°o", "H√£y ch·ª•p ho·∫∑c t·∫£i l√™n m·ªôt ·∫£nh tr∆∞·ªõc!")
        return

    try:
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i
        status_label.config(text="üîÑ ƒêang x·ª≠ l√Ω...", fg="#F39C12")
        root.update()

        # Ph√°t hi·ªán v√† khoanh v√πng bi·ªÉn s·ªë
        annotated_image, plate_image = detect_license_plate(current_image_path)

        if annotated_image is not None:
            # L∆∞u ·∫£nh ƒë√£ khoanh v√πng
            annotated_path = current_image_path.replace(".jpg", "_annotated.jpg")
            cv2.imwrite(annotated_path, annotated_image)

            # Hi·ªÉn th·ªã ·∫£nh ƒë√£ khoanh v√πng
            annotated_img = Image.fromarray(cv2.cvtColor(annotated_image, cv2.COLOR_BGR2RGB))
            annotated_img.thumbnail((400, 300))
            annotated_display = ImageTk.PhotoImage(annotated_img)
            image_label.config(image=annotated_display)
            image_label.image = annotated_display

            # Nh·∫≠n d·∫°ng vƒÉn b·∫£n t·ª´ bi·ªÉn s·ªë
            if plate_image is not None:
                plate_path = current_image_path.replace(".jpg", "_plate.jpg")
                cv2.imwrite(plate_path, plate_image)

                result = reader.readtext(plate_path, detail=0)
            else:
                result = reader.readtext(current_image_path, detail=0)
        else:
            result = reader.readtext(current_image_path, detail=0)

        text_result.delete(1.0, tk.END)

        if result:
            recognized_text = "\n".join(result)

            # Hi·ªÉn th·ªã k·∫øt qu·∫£ v·ªõi ƒë·ªãnh d·∫°ng ƒë·∫πp h∆°n
            text_result.tag_configure("big", font=("Arial", 16, "bold"), foreground="#FFFFFF")
            text_result.tag_configure("plate", font=("Arial", 20, "bold"), foreground="#FFD700",
                                      background="#2C3E50", justify="center")

            # X√≥a n·ªôi dung c≈© v√† ch√®n k·∫øt qu·∫£ m·ªõi
            text_result.delete(1.0, tk.END)

            # Th√™m ti√™u ƒë·ªÅ
            text_result.insert(tk.END, "BI·ªÇN S·ªê NH·∫¨N DI·ªÜN ƒê∆Ø·ª¢C:\n\n", "big")

            # Th√™m k·∫øt qu·∫£ ch√≠nh v·ªõi ƒë·ªãnh d·∫°ng ƒë·∫∑c bi·ªát
            text_result.insert(tk.END, f" {recognized_text} \n", "plate")

            # Th√™m ph√¢n t√°ch
            text_result.insert(tk.END, "\n" + "‚ïê" * 50 + "\n\n", "big")

            # Th√™m th√¥ng tin ph·ª•
            text_result.insert(tk.END, f"Th·ªùi gian: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}\n", "big")
            text_result.insert(tk.END, f"·∫¢nh: {os.path.basename(current_image_path)}", "big")

            status_label.config(text="‚úÖ Ho√†n th√†nh!", fg="#27AE60")
        else:
            text_result.insert(tk.END, "Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c vƒÉn b·∫£n n√†o")
            status_label.config(text="‚ùå Kh√¥ng t√¨m th·∫•y vƒÉn b·∫£n", fg="#E74C3C")

    except Exception as e:
        messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ nh·∫≠n d·∫°ng vƒÉn b·∫£n: {e}")
        status_label.config(text="‚ùå L·ªói x·ª≠ l√Ω", fg="#E74C3C")

# ======================================
# C√°c h√†m h·ªó tr·ª£: X·ª≠ l√Ω Webcam, Ch·ª•p ·∫£nh, T·∫£i ·∫£nh, GUI
# ======================================

# H√†m x·ª≠ l√Ω webcam (ch·∫°y trong thread ri√™ng)
# - M·ªü camera, ƒë·ªçc frame li√™n t·ª•c.
# - Hi·ªÉn th·ªã frame l√™n label.
# - G·ªçi process_frame ƒë·ªÉ detect v√† OCR trong realtime.
def process_webcam():
    global running, webcam_frame
    cap = cv2.VideoCapture(0)

    if not cap.isOpened():
        messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ m·ªü webcam.")
        running = False
        return

    while running:
        ret, frame = cap.read()
        if not ret:
            break

        webcam_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        frame_img = Image.fromarray(webcam_frame)
        frame_img.thumbnail((400, 300))
        frame_display = ImageTk.PhotoImage(frame_img)
        webcam_label.config(image=frame_display)
        webcam_label.image = frame_display
        processed_frame = process_frame(frame, last_detected)

    cap.release()

# H√†m ch·ª•p ·∫£nh t·ª´ webcam
# - L∆∞u ·∫£nh v√†o th∆∞ m·ª•c captured_images v·ªõi t√™n sequential.
# - Hi·ªÉn th·ªã ·∫£nh ch·ª•p l√™n label.
# - G·ªçi recognize_text ƒë·ªÉ OCR ngay.
def capture_image():
    global webcam_frame, current_image_path
    if webcam_frame is None:
        messagebox.showwarning("C·∫£nh b√°o", "Webcam ch∆∞a s·∫µn s√†ng!")
        return

    try:
        os.makedirs("captured_images", exist_ok=True)
        file_path = f"captured_images/captured_{len(os.listdir('captured_images')) + 1}.jpg"
        Image.fromarray(webcam_frame).save(file_path)

        img = Image.open(file_path)
        img.thumbnail((400, 300))
        img_display = ImageTk.PhotoImage(img)
        image_label.config(image=img_display)
        image_label.image = img_display

        current_image_path = file_path
        recognize_text()
    except Exception as e:
        messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ch·ª•p ·∫£nh: {e}")

# H√†m t·∫£i ·∫£nh t·ª´ t·ªáp
# - M·ªü dialog ch·ªçn file ·∫£nh.
# - Hi·ªÉn th·ªã ·∫£nh l√™n label v√† c·∫≠p nh·∫≠t current_image_path.
def upload_image():
    file_path = filedialog.askopenfilename(
        title="Ch·ªçn ·∫£nh",
        filetypes=[("T·∫•t c·∫£ ·∫£nh", "*.jpg *.jpeg *.png *.bmp *.tiff"),
                   ("JPEG", "*.jpg *.jpeg"),
                   ("PNG", "*.png")]
    )
    if file_path:
        try:
            img = Image.open(file_path)
            img.thumbnail((400, 300))
            img_display = ImageTk.PhotoImage(img)
            image_label.config(image=img_display)
            image_label.image = img_display
            global current_image_path
            current_image_path = file_path
            status_label.config(text="üìÅ ƒê√£ t·∫£i ·∫£nh", fg="#3498DB")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ m·ªü ·∫£nh: {e}")

# H√†m x√≥a k·∫øt qu·∫£
# - X√≥a text result, image label, reset status.
def clear_results():
    text_result.delete(1.0, tk.END)
    image_label.config(image="")
    image_label.text = "Ch∆∞a c√≥ ·∫£nh n√†o"
    status_label.config(text="üîÑ S·∫µn s√†ng", fg="#7F8C8D")

# H√†m x·ª≠ l√Ω tho√°t ch∆∞∆°ng tr√¨nh
# - D·ª´ng running v√† destroy root n·∫øu x√°c nh·∫≠n.
def on_closing():
    global running
    running = False
    if messagebox.askokcancel("Tho√°t", "B·∫°n c√≥ mu·ªën tho√°t ·ª©ng d·ª•ng?"):
        root.destroy()

# H√†m t·∫°o giao di·ªán GUI
# - T·∫°o window ch√≠nh, c√°c frame cho header, webcam, image, controls, results.
# - ƒê·ªãnh nghƒ©a styles cho button, label.
# - G√°n command cho c√°c button: upload, capture, detect, recognize, clear.
def create_gui():
    global root, webcam_label, image_label, text_result, status_label

    root = tk.Tk()
    root.title("üöó Nh·∫≠n Di·ªán Bi·ªÉn S·ªë Xe - License Plate Recognition")
    root.geometry("1200x800")
    root.configure(bg="#2C3E50")

    # T·∫°o style t√πy ch·ªânh
    style = ttk.Style()
    style.theme_use('clam')

    # C·∫•u h√¨nh style
    style.configure("Title.TLabel", font=("Segoe UI", 16, "bold"),
                    background="#2C3E50", foreground="#ECF0F1")
    style.configure("Subtitle.TLabel", font=("Segoe UI", 12),
                    background="#34495E", foreground="#BDC3C7")
    style.configure("Modern.TButton", font=("Segoe UI", 10, "bold"),
                    padding=(15, 8))
    style.configure("Card.TFrame", background="#34495E", relief="solid", borderwidth=1)

    # Header
    header_frame = tk.Frame(root, bg="#34495E", height=80)
    header_frame.pack(fill=tk.X, padx=10, pady=(10, 0))
    header_frame.pack_propagate(False)

    title_label = tk.Label(header_frame, text="üöó H·ªÜ TH·ªêNG NH·∫¨N DI·ªÜN BI·ªÇN S·ªê XE",
                           font=("Segoe UI", 20, "bold"),
                           bg="#34495E", fg="#ECF0F1")
    title_label.pack(pady=15)

    # Main container
    main_container = tk.Frame(root, bg="#2C3E50")
    main_container.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

    # Top section - Webcam v√† Captured Image
    top_section = tk.Frame(main_container, bg="#2C3E50")
    top_section.pack(fill=tk.BOTH, expand=True)

    # Webcam frame
    webcam_frame_container = tk.Frame(top_section, bg="#34495E", relief="raised", bd=2)
    webcam_frame_container.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))

    webcam_header = tk.Frame(webcam_frame_container, bg="#E74C3C", height=40)
    webcam_header.pack(fill=tk.X)
    webcam_header.pack_propagate(False)

    tk.Label(webcam_header, text="üìπ CAMERA TR·ª∞C TI·∫æP",
             font=("Segoe UI", 12, "bold"),
             bg="#E74C3C", fg="white").pack(pady=8)

    webcam_label = tk.Label(webcam_frame_container, bg="#2C3E50",
                            text="Camera ƒëang kh·ªüi ƒë·ªông...",
                            font=("Segoe UI", 12), fg="#BDC3C7")
    webcam_label.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

    # Captured image frame
    image_frame_container = tk.Frame(top_section, bg="#34495E", relief="raised", bd=2)
    image_frame_container.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(5, 0))

    image_header = tk.Frame(image_frame_container, bg="#3498DB", height=40)
    image_header.pack(fill=tk.X)
    image_header.pack_propagate(False)

    tk.Label(image_header, text="üì∏ ·∫¢NH ƒê√É CH·ª§P / BI·ªÇN S·ªê PH√ÅT HI·ªÜN",
             font=("Segoe UI", 12, "bold"),
             bg="#3498DB", fg="white").pack(pady=8)

    image_label = tk.Label(image_frame_container, bg="#2C3E50",
                           text="Ch∆∞a c√≥ ·∫£nh n√†o",
                           font=("Segoe UI", 12), fg="#BDC3C7")
    image_label.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

    # Middle section - Controls
    middle_section = tk.Frame(main_container, bg="#2C3E50", height=80)
    middle_section.pack(fill=tk.X, pady=10)
    middle_section.pack_propagate(False)

    # Control buttons
    control_frame = tk.Frame(middle_section, bg="#34495E", relief="raised", bd=2)
    control_frame.pack(fill=tk.BOTH, expand=True)

    tk.Label(control_frame, text="ƒêI·ªÄU KHI·ªÇN",
             font=("Segoe UI", 10, "bold"),
             bg="#34495E", fg="#ECF0F1").pack(pady=5)

    button_container = tk.Frame(control_frame, bg="#34495E")
    button_container.pack(expand=True, pady=5)

    # C√°c n√∫t ch·ª©c nƒÉng v·ªõi m√†u s·∫Øc kh√°c nhau
    upload_btn = tk.Button(button_container, text="üìÅ T·∫£i ·∫£nh",
                           command=upload_image,
                           font=("Segoe UI", 9, "bold"),
                           bg="#9B59B6", fg="white",
                           relief="flat", padx=15, pady=5,
                           cursor="hand2")
    upload_btn.pack(side=tk.LEFT, padx=5)

    capture_btn = tk.Button(button_container, text="üì∏ Ch·ª•p",
                            command=capture_image,
                            font=("Segoe UI", 9, "bold"),
                            bg="#E67E22", fg="white",
                            relief="flat", padx=15, pady=5,
                            cursor="hand2")
    capture_btn.pack(side=tk.LEFT, padx=5)

    detect_btn = tk.Button(button_container, text="üîç Ph√°t hi·ªán bi·ªÉn s·ªë",
                           command=detect_plate,
                           font=("Segoe UI", 9, "bold"),
                           bg="#F1C40F", fg="white",
                           relief="flat", padx=15, pady=5,
                           cursor="hand2")
    detect_btn.pack(side=tk.LEFT, padx=5)

    recognize_btn = tk.Button(button_container, text="üìù Nh·∫≠n di·ªán vƒÉn b·∫£n",
                              command=recognize_text,
                              font=("Segoe UI", 9, "bold"),
                              bg="#2ECC71", fg="white",
                              relief="flat", padx=15, pady=5,
                              cursor="hand2")
    recognize_btn.pack(side=tk.LEFT, padx=5)

    clear_btn = tk.Button(button_container, text="üóëÔ∏è X√≥a",
                          command=clear_results,
                          font=("Segoe UI", 9, "bold"),
                          bg="#95A5A6", fg="white",
                          relief="flat", padx=15, pady=5,
                          cursor="hand2")
    clear_btn.pack(side=tk.LEFT, padx=5)

    # Bottom section - Results
    bottom_section = tk.Frame(main_container, bg="#34495E", relief="raised", bd=2)
    bottom_section.pack(fill=tk.BOTH, expand=True)

    result_header = tk.Frame(bottom_section, bg="#F39C12", height=40)
    result_header.pack(fill=tk.X)
    result_header.pack_propagate(False)

    tk.Label(result_header, text="üìã K·∫æT QU·∫¢ NH·∫¨N DI·ªÜN",
             font=("Segoe UI", 12, "bold"),
             bg="#F39C12", fg="white").pack(pady=8)

    # Text result v·ªõi scrollbar
    text_frame = tk.Frame(bottom_section, bg="#34495E")
    text_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

    text_result = tk.Text(text_frame, wrap=tk.WORD,
                          font=("Arial", 12),
                          bg="#2C3E50", fg="#ECF0F1",
                          insertbackground="#ECF0F1",
                          relief="flat", bd=0, padx=10, pady=10)

    scrollbar = tk.Scrollbar(text_frame, orient="vertical", command=text_result.yview)
    text_result.configure(yscrollcommand=scrollbar.set)

    text_result.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    # Status bar
    status_frame = tk.Frame(root, bg="#34495E", height=30)
    status_frame.pack(fill=tk.X, side=tk.BOTTOM)
    status_frame.pack_propagate(False)

    status_label = tk.Label(status_frame, text="üîÑ S·∫µn s√†ng",
                            font=("Segoe UI", 9),
                            bg="#34495E", fg="#7F8C8D")
    status_label.pack(side=tk.LEFT, padx=10, pady=5)

    exit_btn = tk.Button(status_frame, text="‚ùå Tho√°t",
                         command=on_closing,
                         font=("Segoe UI", 9),
                         bg="#E74C3C", fg="white",
                         relief="flat", padx=10, pady=2,
                         cursor="hand2")
    exit_btn.pack(side=tk.RIGHT, padx=10, pady=2)

# Ch·∫°y ·ª©ng d·ª•ng
if __name__ == "__main__":
    create_gui()
    webcam_thread = Thread(target=process_webcam)
    webcam_thread.daemon = True
    webcam_thread.start()
    root.protocol("WM_DELETE_WINDOW", on_closing)
    root.mainloop()